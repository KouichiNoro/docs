---
title: Starting a Vaadin Project With Gradle
tab-title: Gradle
order: 500
layout: page
---

= Starting a Vaadin Project With Gradle

[role="since:com.vaadin:vaadin@V20 standalone"]
--
--

[.introText]
Gradle is a popular build tool for Java, Groovy, Kotlin, and other projects.
It is an alternative to using Maven and, in many ways, much simpler to use.
It is also more powerful, if that is required.
You can use it to build a Vaadin application, run it, and manage dependencies during development.

This tutorial describes how to create, compile, and run a Vaadin application using the Vaadin Gradle plugin.
The *Gretty plugin* is used to run the application in an embedded web server.

For information about the general usage of Gradle, please refer to the link:https://docs.gradle.org/current/userguide/userguide.html[Gradle User Manual].

== Requirements

To use the Vaadin Gradle plugin, your environment needs to meet the following requirements:

* Windows, Mac, or Linux
* Java SDK 8 or newer
* Gradle 5 or 6 (optional, because of the wrapper provided in the starter projects)
** If you prefer to install it directly, you can find instructions at https://gradle.org/install
* `Node.js` and `npm` (optional, because they can also be installed locally to the project using the Vaadin Gradle plugin)

Except for Gradle, these are general Vaadin requirements, as described in <<{articles}/guide/install#,Installing Development Tools>>.

.Installing Gradle is optional
[NOTE]
If you are going to use Vaadin's Gradle-based starter projects, there is no need to install Gradle on your machine.
The Gradle Wrapper is a script that is included in those starter projects to manage the download and execution of Gradle locally for your project.
For more information on using the Gradle Wrapper, please refer to the https://docs.gradle.org/current/userguide/gradle_wrapper.html[Official Gradle Documentation].

== Creating a Vaadin Project

The easiest way to create a new project is to clone a starter repository containing an application skeleton.

You can also take any existing Vaadin project and make a `build.gradle` file for it, as described in <<build-file, "The Build File">>.

=== Cloning a Starter Repository

The following starter repositories are currently available:

.Clone the `master` branch of the starter projects
[NOTE]
Please note that the following repositories default to the V14 branch as you clone them.
If you intend to use them with the latest version of Vaadin, you need to clone the `master` branch, or simply change to the `master` branch after you have cloned one of the starter projects.

`link:https://github.com/vaadin/base-starter-gradle[https://github.com/vaadin/base-starter-gradle]`::
A simple web application project to be deployed as a WAR package.
This example can also be used for Java EE by changing the servlet dependency to `javax:javaee-api`, and, if appropriate, adding the `com.vaadin:vaadin-cdi` dependency for CDI integration.
+
[subs="normal"]
----
$ git clone pass:[https://github.com/vaadin/base-starter-gradle] _my-project_
----

`link:https://github.com/vaadin/base-starter-spring-gradle[https://github.com/vaadin/base-starter-spring-gradle]`::
A web application project skeleton that uses Spring Boot.
+
[subs="normal"]
----
$ git clone pass:[https://github.com/vaadin/base-starter-spring-gradle] _my-project_
----

=== Starter Project Contents

Once cloned, the project should look like this (when imported in the Eclipse IDE):

[#newproject-image]
.Cloned Starter Project
image::_images/gradle-project-created-annotated.png[Contents of a Gradle based project]

.The figure shows the contents of a simple web application starter
[NOTE]
Note that the figure shows only the contents of `base-starter-gradle` (a simple web application starter without Spring Boot).
However, there is not much difference between this and a starter based on Spring Boot, except that the latter has an additional class annotated with `@SpringBootApplication`.
If this is your first experience of using Vaadin with Spring Boot, you can find more information in <<{articles}/flow/integrations/spring/spring-boot,Using Vaadin with Spring Boot>>.

The most important files and folders are as follows:

`src/main/java/<package>/MainView.java`::
  The application view class for the root route, built from components.

`src/main/java/<package>/GreetService.java`::
  A trivial service object to separate business data and logic from the view.

`frontend/src`::
  A folder for HTML templates and JavaScript code.
  See the `README` file in the folder for more details.

`frontend/styles/shared-styles.css`::
  Application-specific style sheets to style the look of the application.

`frontend/styles/vaadin-text-field-styles.css`::
  An example to modify the style of the `TextField` component.

`build.gradle`::
  The Gradle build file, as described below in <<build-file>>.

`gradlew` and `gradlew.bat`::
  Gradle Wrapper build scripts for Linux/Mac (`gradlew`) and Windows (`gradlew.bat`).
  The build scripts enable the project to be built without Gradle preinstalled.
  As the recommended way to execute any Gradle build is with the help of the Gradle Wrapper, we also use `gradlew` instead of `gradle` throughout the documentation.
  However, the `gradlew` and `gradle` commands can be used interchangeably if you already have Gradle installed and you prefer to use that installation of Gradle.
  You can read more about the benefits of using the Gradle Wrapper in the https://docs.gradle.org/current/userguide/gradle_wrapper.html[Official Gradle Documentation].

[[build-file]]
== The Build File

As a minimum, the `build.gradle` file needs to enable the Vaadin Gradle plugin:

----
plugins {
    id 'com.vaadin' version '20.0.0' <1>

    // Optional
    id 'org.gretty' version '3.0.3' <2>
    id 'war' <3>
    id 'groovy' <4>
}
----
<1> Use the plugin version that matches the Vaadin version.
+
Please see the releases at https://github.com/vaadin/platform/releases[github.com/vaadin/platform] for the latest release.
+
To try the prerelease version of the Vaadin Gradle plugin, see <<pre-release,Using Plugin pre-release Version>>
<2> Use the Gretty embedded web server to run the application during development.
See <<running>> for details.
<3> Build a `WAR` package to deploy to a traditional servlet container.
You also need to define the servlet API using `providedCompile "javax.servlet:javax.servlet-api:3.1.0"` in the dependencies section.
<4> By default, the plugin supports Java.
You can include Groovy or Kotlin as an optional plugin.

[[build-file.vaadin-options]]
=== Vaadin Plugin Configuration

Vaadin Gradle plugin options are configured in a `vaadin` block.

During development, it is usually as follows:

----
vaadin {
    optimizeBundle = false
}
----

If the parameter is `true`, the frontend bundle is optimized for all supported browsers, but compilation is much slower.

For configuration options, see <<all-options,plugin configuration options>>


[[build-file.repositories]]
=== Configuring Repositories

The `repositories` section defines the locations to search for packages.
As a minimum, the repository that holds the Vaadin libraries is required:

----
repositories {
    mavenCentral()
    maven { url = "https://maven.vaadin.com/vaadin-addons" }
}
----

If you want to try the Vaadin platform prerelease versions, you can add the following repository, as well:

----
repositories {
    maven { url = "https://maven.vaadin.com/vaadin-prereleases" }
}
----

.Vaadin recommends using final releases
[NOTE]
To avoid any inconsistencies, do not use any prerelease versions in your production environment, especially snapshots.
Vaadin always recommends using the LTS or final releases of newer versions.
Please visit the https://github.com/vaadin/platform/releases[Vaadin platform release] page for the latest releases of LTS and the final releases of newer versions.

You can use any Gradle repository definitions in the block.
See https://docs.gradle.org/current/userguide/declaring_repositories.html[Declaring repositories] in the Gradle documentation for more information.

[[build-file.dependencies]]
=== Configuring Dependencies

You need to add `vaadin-core` or `vaadin` library as a Java dependency:

----
dependencies {
    implementation "com.vaadin:vaadin-core:20.+"
}
----

With the `20.+` version specification, you choose to use the latest version of Vaadin, but you can also specify the exact version.

See https://docs.gradle.org/current/userguide/declaring_dependencies.html[Declaring dependencies] in the Gradle documentation for further details.

[[build-file.other]]
=== Other Configuration

In the starter project, default targets are defined for convenience, so that you can run `gradle` without specifying any tasks:

----
defaultTasks("clean", "vaadinBuildFrontend", "build")
----

[[compiling]]
== Compiling

If you have defined the default tasks as described above in <<build-file.other>>, you can run:

----
$ ./gradlew
----

on Windows:

----
$ gradlew
----

.The unix style of running gradlew is used in the rest of this document
[NOTE]
For brevity, only the unix systems style of running `./gradlew` is shown in this document from this point on.
Obviously, if you are using Windows, you need to replace it with `gradlew`.

Otherwise, the project builds with the standard `build` task.
However, for the first build, you need to build the Vaadin frontend.

----
$ ./gradlew vaadinBuildFrontend build
----

[[compiling.tasks]]
=== Vaadin Tasks

The Vaadin-related tasks that the plugin handles are as follows:

`vaadinPrepareFrontend`::
  Checks that `node.js` and `npm` are installed, copies frontend resources, and creates or updates the `package.json` and `webpack.config.json` files.
  The frontend resources are inside `.jar` dependencies, and copied to `node_modules`.

`vaadinBuildFrontend`::
  Builds the frontend bundle with the webpack utility.
  Vaadin frontend resources, such as HTML, JavaScript, CSS, and images, are bundled to optimize loading the frontend.
  This task is not executed automatically on the `build` and other targets, so you need to run it explicitly.

`vaadinClean`::
  Cleans the project and removes `node_modules`, `package-lock.json`, `webpack.generated.js`, `tsconfig.json`, `types.d.ts`, `pnpm-lock.yaml` and `pnpmfile.js`.
  You need to run this task if, for example, you upgrade the Vaadin version.

To get the complete list of tasks handled by the configured plugins, enter:

----
$ ./gradlew tasks
----

[[running]]
== Running the Application
If you are using a starter based on Spring Boot (Vaadin with Spring Boot) to run the application during development, you can do it in a similar way to running any normal Spring Boot application.
This means you can either run it from the class containing the `main` method (which is normally annotated with `@SpringBootApplication`), or by using Spring Boot's Gradle plugin `bootRun` task:

----
$ ./gradlew bootRun
----

If you are using a simple web application (Vaadin without Spring Boot), to run the application during development, the Gradle plugin supports the Gretty plugin, which runs the application in an embedded web server.
You can do this either in an IDE or at the command line.

One way to enable the Gretty plugin is in the `plugin` section of the `gradle.build` file, as in the starter project:

----
plugins {
    ...
    id 'org.gretty' version '3.0.3'
}
----

You can configure Gretty further in an optional `gretty` block:

----
gretty {
    contextPath = "/" <1>
    servletContainer = "jetty9.4" <2>
}
----
<1> Sets the context path to the root path.
The default context path contains the project name, so the URL would be `http://localhost:8080/myproject` (or whatever your project name is).
<2> Use Jetty as the servlet container, with the specified version.

The application is started with the `appRun` task:

----
 $ ./gradlew appRun
----

The task compiles the application and starts the web server in `http://localhost:8080/` (if the root context path is configured as described above).

Note that you might need to add `jcenter()` to the list of repositories in order to run Gretty tasks, depending on when you are following this documentation.
Currently, some artifacts from `jcenter()` have not yet been moved to `mavenCentral()`. In the future, this step will be unnecessary:

----
repositories {
    // should be removed in the future as jcenter() will become obsolete.
    jcenter()
}
----

See https://akhikhl.github.io/gretty-doc/index.html[Gretty documentation] for a complete reference on using Gretty.

== Developing in the Eclipse IDE

Gradle has first-class support in the Eclipse IDE, IDEA, NetBeans, and Android Studio, to name just a few.
The following section explores how to create, import, and develop a Vaadin Gradle project in the Eclipse IDE.

=== Importing a New Project

You create a new Vaadin project by cloning the repository at the command line and importing it to Eclipse as a Gradle project.

. Clone the starter repository of you choice as described earlier.
. Select *menu:File[Import > Gradle > Existing Gradle Project]*.
. Enter or select the *Project root directory*.
. Click *Finish*.

The project should appear in the *Project Explorer* and look as shown in <<newproject-image>>.

You should now see the *Gradle Tasks* tab; you can browse all the available tasks.

.Gradle Tasks tab in Eclipse
image::_images/gradle-eclipse-tasks.png[Gradle Tasks tab in Eclipse]

=== Running the Application

You can run the project using Gretty in an embedded web server.

. Open the *Gradle Tasks* tab
. Double-click the `gretty` -> `appRun` task
** The *Gradle Executions* tab opens and shows the progress of the build
. When the `:apprun` task is running, open the browser at `http://localhost:8080`
. To stop the server, go to the *Console* tab and press any key

[[production]]
== Going to Production

To build a web application as a WAR package, you need the `war` plugin.
You also need to enable it.

In `build.gradle`, you need to include the plugin and enable `WAR` build:
----
plugins {
  ...
  id 'war'
}

war {
    enabled = true
}
----

When making a production-ready build, the Vaadin Gradle plugin transpiles the client-side dependencies to legacy browsers, as described in <<{articles}/guide/production#, Deploying to Production>>.
You enable that by either setting it in `build.gradle` or at the command line when invoking Gradle.

In `build.gradle`:

.Enabling Vaadin production mode through build.gradle
----
vaadin {
   productionMode = true
}
----

At the command line:

.Enabling Vaadin production mode at the command line
----
$ ./gradlew -Pvaadin.productionMode=true war
----

.Configuration specific to Spring Boot
[NOTE]
If you are using Vaadin with Spring Boot, the default packaging for production would normally be the `jar`.
However, if you intend to package a Spring Boot application as a WAR to be deployed in a standalone container such as `tomcat`, there are two additional steps you need to take:

* Your application class that is annotated with `@SpringBootApplication` should extend `SpringBootServletInitializer` and override the `configure` method:

.Example of enabling SpringBootServletInitializer
[source,java]
----
@SpringBootApplication
public class DemoApplication extends SpringBootServletInitializer {
    @Override
    protected SpringApplicationBuilder configure(
	                     SpringApplicationBuilder application) {
        return application.sources(DemoApplication.class);
    }
}
----

* Adding the following dependency:

.Dependency that should be added to build.gradle
----
dependencies {
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
}
----

[[pre-release]]
== Using Gradle plugin snapshot versions

A snapshot version of the plugin is pushed to the prerelease repository.
Note that this section is about trying the prerelease and snapshot versions of the Vaadin Gradle plugin itself, not the Vaadin platform.

To use the prereleased plugin, add the `vaadin-prereleases` repository to the project `settings.gradle` file.
`settings.gradle` is mostly used within multi-module projects, but it is useful for other configurations as well.
So if you do not already have it in your project, create a plain text file called `settings.gradle` next to your `build.gradle` file (normally in project root folder).

.Plugin repository added to settings file
----
pluginManagement {
    repositories {
        maven { url = 'https://maven.vaadin.com/vaadin-prereleases' }
        gradlePluginPortal()
    }
}
----

The plugin then needs to be defined and applied in the `build.gradle` file.

.Define snapshot plugin
----
buildscript {
    ...
    dependencies {
        classpath group: 'com.vaadin',
                name: 'vaadin-gradle-plugin',
                version: '20.0-SNAPSHOT'
    }
}

plugins {
    ...
}

apply plugin: 'com.vaadin'
----

.Remember to update the `plugins` block
[NOTE]
Note that `id 'com.vaadin' version 'xyz'` should also be removed from the `plugins` block, so that the plugin is applied only by `apply plugin: 'com.vaadin'` (as demonstrated in the example).

[[all-options]]
== Plugin Configuration Options

Here is a list of all the configuration options, with their default values:

`productionMode: Boolean = false`::
Define if the application is running in productionMode.
Defaults to `false`.
For production, the frontend is transpiled for older browsers and optimized, as described in <<{articles}/guide/production#,Deploying to Production>>.
Running the `vaadinBuildFrontend` task automatically switches this to `true`, so there is no need to configure anything.

`webpackOutputDirectory: File? = null`::
The folder where webpack should output `index.js` and other generated files.
Defaults to `null`, which uses the automatically detected value of the main SourceSet, usually `build/resources/main/META-INF/VAADIN/webapp/`.

`npmFolder: File = project.projectDir`::
The folder where the `package.json` file is located.
The default is the project root directory.

`webpackTemplate: String = FrontendUtils.WEBPACK_CONFIG`::
Copy `webapp.config.js` from the specified URL if it is missing.
The default is the template provided by this plugin.
Set it to an empty string to disable the feature.

`webpackGeneratedTemplate: String = FrontendUtils.WEBPACK_GENERATED`::
Copy `webapp.generated.js` from the specified URL.
The default is the template provided by this plugin.
Set it to an empty string to disable the feature.

`generatedFolder: File(project.projectDir, "target/frontend")`::
The target folder for generated files used by webpack.

`frontendDirectory: File(project.projectDir, "frontend")`::
The directory with the frontend source files of the project.

`generateBundle: Boolean = true`::
If `true`, generate a bundle from the project frontend sources.

`runNpmInstall: Boolean = true`::
Run `npm install` after updating dependencies.

`generateEmbeddableWebComponents: Boolean = true`::
Generate web components from WebComponentExporter inheritors.

`frontendResourcesDirectory: File = File(project.projectDir, Constants.LOCAL_FRONTEND_RESOURCES_PATH)`::
Defines the project frontend directory from where resources should be copied for use with webpack.

`optimizeBundle: Boolean = true`::
Use a byte code scanner strategy to discover frontend components.

`pnpmEnable: Boolean = true`::
Use `pnpm` to install `npm` frontend resources.
The default is `true`.

`requireHomeNodeExec: Boolean = false`::
Whether vaadin home node executable usage is forced.
If `true`, then vaadin home `node` is checked, and installed if absent.
This is then used instead of globally or locally installed `node`.

`useDeprecatedV14Bootstrapping: Boolean = false`::
Defines whether the application should run in legacy V14 bootstrap mode.
The default is `false`.

`eagerServerLoad: Boolean = false`::
Defines whether the initial UIDL object is added to the bootstrap `index.html`.
The default is `false`.

`applicationProperties: File = File(project.projectDir, "src/main/resources/application.properties")`::
The application properties file in a Spring project.

`openApiJsonFile: File = File(project.buildDir, "generated-resources/openapi.json")`::
Generated path of the OpenAPI JSON.

`javaSourceFolder: File = File(project.projectDir, "src/main/java")`::
Java source folders for connect scanning.

`generatedTsFolder: File = File(project.projectDir, "frontend/generated")`::
Folder where Flow puts TS API files for client projects.

`nodeVersion: String = "v14.15.4"`::
The `node.js` version to be used when `node.js` is installed automatically by Vaadin, for example `"v14.15.4"`.
The default is `[FrontendTools.DEFAULT_NODE_VERSION]`.

`nodeDownloadRoot: String = "https://nodejs.org/dist/"`::
URL from where to download `node.js`.
This can be needed in corporate environments where the `node.js` download is provided from an intranet mirror.
The default is `[NodeInstaller.DEFAULT_NODEJS_DOWNLOAD_ROOT]`.

`resourceOutputDirectory: File = File(project.buildDir, "vaadin-generated")`::
Define the output directory for generated non-served resources, such as the token file.
The default is the `build/vaadin-generated` folder.

////
== Further Reading

TODO
////
