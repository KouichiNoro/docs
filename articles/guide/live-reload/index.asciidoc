---
title: Live Reload
tab-title: Overview
layout: tabbed-page
order: 30
---

= Live Reload

[.lead]
Live Reload means automatically reloading the application in the browser when the code is modified.
The alternative is manually restarting the server and refreshing the browser page.

In Vaadin projects, Live Reload is supported out of the box for frontend code changes, and for Java changes in Spring Boot projects.
Live Reload also integrates with popular third-party Java hotpatching tools.

== Frontend Changes

Code in the application's `frontend` folder (JS/TS/CSS files) is monitored by `webpack-dev-server` when the application is running in development mode.
Adding, modifying or removing a file in this folder triggers recompilation of the frontend bundle, followed by a browser reload.

== Java Changes

On the Java side, Live Reload means first compiling the modified code, then updating the running server (either by restarting it or by hotpatching the runtime), and finally refreshing the browser.
Live Reload can use Spring Boot Developer Tools' automatic server restart feature (enabled by default in Vaadin applications based on Spring Boot), as well as two hotpatching tools: JRebel (commercial, for all Vaadin applications) and HotswapAgent (open-source, for all Vaadin applications).
See below for details on setting up the technology you want:

** <<spring-boot#, Spring Boot Developer Tools>>
** <<jrebel#, JRebel>>
** <<hotswap-agent#, HotswapAgent>>

Note that only one of these technologies should be configured in the project at any one time, in order to avoid interference.
In general, hotpatching is faster than automatic restarts and works best for small, incremental changes.
Larger changes usually require a server restart. Examples of these might be class-level modifications or changes to code that affect the whole application lifecycle (such as startup, shutdown, or mapping between frontend and backend components).

== Automatic Server Restart

As an alternative to Live Reload, the Jetty and TomEE Maven plugins facilitate automatic server restart on Java changes.
These do not require third-party tools, but have the disadvantage that server restarts are slower and the browser will not refresh automatically.

** <<jetty#, Automatic Restart with Jetty Maven Plugin>>
** <<cdi#, Automatic Restart with TomEE Maven Plugin>>
