---
title: Quick Style Guide
order: 70
layout: page
---

= Quick Style Guide
:experimental:

== A

=== abbreviations

=== “advice”

"Advice" is an uncountable noun.
So, it can't be used with the indefinite article ("an") and it can't be plural.
If you want to use "a" or "an", you need to introduce another word, such as "piece" or "bit".
For example:

_The developer gave me a good piece of advice._

You can use phrases such as "some" and "a lot of".
For example:

_The user guide contains a lot of good advice._

=== apostrophe (‘)
The apostrophe has a defined function: to indicate when one or more letters have been omitted.
For that reason, it is used in contracted forms of verbs. In general, in our technical documentation, we avoid using contracted forms.
They are correct, but more appropriate to less formal writing.
Nevertheless, to show the function of the apostrophe in contractions in general, here are some examples:

_I am_ -> _I'm_ (the letter "a" is omitted)

_She is_ -> _She's_ (the letter "i" is omitted)

_They are not_ -> _They aren't_ (the letter "o" is omitted)

There are some special cases where the system has been adapted, by convention.
For example:

_He will not_ -> _He won't_

_We shall not_ -> _We shan't_

Apart from contractions, there is another standard use of the apostrophe in English: to indicate possession.
In fact, this has its logic.
In Old English, the possessive case of a noun was formed by adding "-es" to it.
In modern English, the "e" has been dropped from that suffix.
The omission of the "e" is signalled by that apostrophe.

The possessive form of a single noun is formed by adding "'s".
For example:

_The developer's guide_

_The boss's office_

To form the possessive of a plural noun, using an apostrophe, the rule is:

. write the plural
. in the common case, where the plural ends in "s", place the apostrophe after that "s"
. in the few irregular cases where the plural does not end in "s" (for example, "men", "women", "children"), add "'s", as for a single noun

For example:

_The employees' salaries_

_The bosses' salaries_

_The women's records_

_The mice's tails_

For when to form a possessive using an apostrophe, and when to use "of", see <<a_to_z.possessive, possessive>>.

=== “application”

=== apposition
Consider this sentence:

_The company CEO, Nick Smith, attended the meeting._

In this sentence, "The company CEO" and "Nick Smith" identify the same entity (in this case, a person).
In other words, "Nick Smith" is another name for "the company CEO".
In the terminology, the phrase "Nick Smith" is "in apposition" with "the company CEO".
Notice that, in this situation, the phrase that is in apposition is delimited by commas.

Now consider this sentence:

_The company CEO, Nick Smith, spoke to company employee Susan Rae._

In this case, "company employee" and "Susan Rae" do not identify the same entity.
There may be only one Susan Rae, but there are many other company employees.
So, "Susan Rae" is not in apposition with "company employee".
Hence, "Susan Rae" is not delimited by commas.

Let's look at an example that is more relevant to the context of technical documentation.

Here is some information about the parameters of a method.

_The method takes a single parameter: `duration`._

_The method's parameter, `duration`, specifies the time in milliseconds that the animation should run._

Here, as there is only one parameter, "the method's parameter" and "duration" refer to the same entity. "duration" is in apposition with "the method's parameter", and so is delimited by commas.

Here is some similar information but, this time, the method takes more than one parameter.

_The method takes two parameters: `startTime` and `duration`._

_The parameter `duration` specifies the time in milliseconds that the animation should run._

Here, "parameters" and "duration" do not refer to the same entity.
So, "duration" is not in apposition with "parameters".
For this reason, "duration" is not delimited by commas.

[[a_to_z.as_if_or_like]]
=== "as if" or "like"?
Consider this sentence:

_It looks as if it's going to rain._

Here, the clause "it's going to rain" contains a finite (full) verb ("is going to rain").
In this situation, we should use "as if" to connect the two parts of the sentence.
It is not correct to say, "It looks like it's going to rain," although this is a very common grammatical error.

Here is another sentence:

_It looks like rain._

Here, the single-word clause "rain" does not contain a finite verb.
In this situation, we should use "like" to connect the two parts of the sentence.

Another way of thinking of this is to say that "as if" expects to be followed by a verb clause.
In contrast, the word "like" expects to be followed by a noun or a noun phrase.

Some other examples:
_Treat the issue as if it were a bug._ [verb clause]


[[a_to_z.as_or_like]]
=== “as” or “like”?
Consider this sentence:

Edit the file as you would normally.
Make the amendments as described below.
As I have already mentioned, the software is open-source.
Treat the issue as a bug.

=== AsciiDoc
See “The Longer View” for general guidelines on AsciiDoc formatting in Vaadin technical documentation.

=== “asynchronous”
The spelling is "asynchronous".

=== “awesome”
In its literal meaning, "awesome" is used to describe something that causes awe, a feeling of respect blended with fear or wonder.

_The launch of the huge rocket on a pillar of smoke and flames was an awesome sight._

_The enormously powerful waterfall is really an awesome spectacle._

In modern informal speech, "awesome" has been hijacked from its literal meaning to be a synonym for "very good".
Please avoid this usage.

== B

“back end”

=== “both”
"Both" is an emphatic word that applies specifically to two stated things.
It cannot be used for more than two.

For example:

_This functionality is available in both Eclipse and NetBeans._

It would be incorrect to say, for example, _This functionality is available in both Eclipse, NetBeans, and IntelliJ IDEA._

brackets::
See “parentheses”.

== C

capitalization::
We need to capitalize only when there is a good reason for doing so.
Otherwise, there is a danger that capitalization can creep into lots of areas where it has no place.
+
One situation where this often happens is in the context of common abbreviations and acronyms.
Many of us tend to think that, because capital letters are used in an acronym, we should also use capital letters when the term is written out in full.
This is usually not the case, unless the term is a proper noun. (See <<a_to_z.proper_nouns, proper nouns>>.)
+
[cols="1,2"]
|===
|CLI
|command-line interface
|MFA
|multi-factor authentication
|SaaS
|software as a service
|JDK
|Java Development Kit [proprietary name]
|===

“client side”::
When used as a noun phrase, this should be written with no hyphen:
+
_The validation is handled on the client side._
+
When used as an adjective phrase, it should be written with a hyphen to avoid ambiguity:
+
_Client-side processing handles the validation._

code::

colon (“:”)::
The function of a colon in a sentence is to signal the beginning of an explanation or a list.
Often, we can think of it as saying, "and it is this..." or "and this is what I'm talking about...". Some examples of this are:
+
_There can be only one reason he is late: he has missed the flight._
+
_Annabel has three valuable characteristics: she is clever, she is conscientious, and she is honest._
+
_The parameter can be of several types: integer, boolean, or string._
+
_On seeing the results of my work, I felt only one emotion: pride._
+
A colon is also commonly used to introduce a list, particularly at the end of a sentence. For example:
+
_Three cities are in the running to stage the next Olympics: Beijing, Chicago, and Melbourne._
+
A colon should not be used to join two full clauses outside the uses mentioned here.
If you are looking for the right punctuation to join two clauses that have some logical relationship, consider using a <<a_to_z.semi-colon, semi-colon>>. Do not use a comma for this purpose. (See <<a_to_z.comma_splice, comma splice>>.)
+
In US English usage (which we use in our documentation), it is permissible to follow a colon by a sentence beginning with a capital letter if that sentence is the first of two or more sentences which the colon governs.
+
_There may be several reasons to learn Esperanto: It is completely regular, so you do not need to learn a lot of exceptions. It is not associated with any specific country, so has no political baggage. Finally, it is just fun to learn._
+
However, if the colon governs only one sentence, begin the sentence with a lowercase letter:
+
_There is a good reason to learn Esperanto: it is just fun to learn._

colloquial expressions

comma splice::
Consider the following (incorrectly punctuated) sentence:
+
_You should never divide by zero, this will cause a runtime error._
+
In this example, we have two complete clauses, as each one has a subject and a finite (full) verb.
In this situation, it is an error to join the two clauses with a comma. This error is often called a "comma splice".
(A splice is a join.)
+
We have several options to rectify this error.
The simplest option is to make each clause a sentence on its own:
+
_You should never divide by zero. This will cause a runtime error._
+
This solution is grammatically correct.
However, it does not show the logical connection between the two clauses. A better option would be to use different punctuation.
A semi-colon would serve the purpose:
+
_You should never divide by zero; this will cause a runtime error._
+
Unlike a comma, a semi-colon can be used to join two complete clauses.
Moreover, it implies a logical connection between them, although the specific logic is left to the reader's interpretation. (See <<a_to_z.semi-colon, semi-colon>>.)
+
Another option would be to use an appropriate conjunction.
As its name suggests, a conjunction is a joining word.
Examples of conjunctions are: _and_, _but_, _or_, _because_, _as_ and _so_.
Conjunctions usually imply some kind of logical connection between the clauses that they join.
+
In our example, we want to express a concept of causation.
_Because_ and _as_ would be suitable options:
+
_You should never divide by zero, because this will cause a runtime error._
+
_You should never divide by zero, as this will cause a runtime error._
+
Although the meaning of these two versions is the same, in fact, by convention, we use _as_ more often than _because_ to express this kind of causation.
For this reason, the version that uses _as_ is the best of the options that we have discussed.

commas

conditional

[[a_to_z.contractions]]
contractions::
Contractions (or "contracted verb forms") are those where one or more letters are omitted. For example:
+
_She's on her way to the meeting._ ["She's" is a contraction of "she is".]
+
_They'll be here on Friday._ ["They'll" is a contraction of "they will".]
+
In general use, contractions are perfectly acceptable and correct. In fact, using contractions can help to make a non-native speaker's English sound much more natural.
+
However, contractions are not generally appropriate in formal contexts, such as academic works and legal documents.
We have made the decision not to use contractions in our technical documentation, perhaps sacrificing a little friendliness of tone in the interests of simplicity of language.

cultural references

currency

== D

dangling participles

dash (“–”)

“data”

dates

definite article (“the”)

“divider”

=== double quotes (“)
See “quotation marks”

“dropdown”

== E

em dash

en dash

=== “either”
Like the word "both", the word "either" is used in the context of two things.
For example:

_The parameter can be either an integer or a boolean._

It is not correct to use "either" where there is a choice between more than two things. For example, this is incorrect:

_The parameter can be either an integer, a boolean or a string._ [incorrect]

In such a case, we could say, for example:

_The parameter can be an integer, a boolean or a string._

== F

“former”

“front end”

== G

== H

“he” / “she” / “they”

headings

“hierarchy”

“his” / “her” / “their”

“hopefully”

hyphen (“-”)+

== I

“if” clauses in the future::
Clauses that refer to conditions in the future use the present tense.
The "result" clause uses the appropriate future form or imperative form.
For example:
+
_If there are any further releases in the future, you will receive an advisory email._ [Not _If there will be..._]
+
_Send us a message via our contact page if you have any problems._ [Not _If you will have..._]
+
See also <<a_to_z.time_clauses_in_future, time clauses in the future>>

“in order to”::
Use “in order to” for clarity.
+
For example:
+
Instead of: “This the information you need to use the components correctly”, \
Use: “This is the information you need in order to use the components correctly”.

indefinite article (“a” / “an”)

“information”::
"Information" is an uncountable noun.
In other words, we cannot talk about one information, two informations, etc.
For the same reason, we cannot use the indefinite article ("a" or "an"), as this implies a quantity of one.
Neither can an uncountable noun be used in the plural, as this, too, implies quantities.
+
If we want to impose a notion of quantity in relation to information, there are several options:
+
- use an intermediary word, such as "piece" or "bit"
- use a quantifier, such as "a lot of", "lots of", "some", etc.

introductory clauses::

“its” or “it’s”::
The possessive form of "it" is "its", with no apostrophe.
This is logical and consistent with the other possessive adjectives;
"I" -> "my", "you" -> "your", he" -> "his", "she" -> "her", etc.
There are no apostrophes in sight!
+
"It's" (with the apostrophe) is a contracted form, similar to "I'm", "you're", "he's", etc.
Here, the apostrophe performs its classical role of indicating that letters have been omitted.
In this way, "it's" can mean "it is" or "it has"; the context will always tell us which meaning is intended.
+
_It's easy to make a mistake._ ["It's" must mean "it is", since "It has easy..." makes no sense at all.]
+
_It's been a difficult day._ ["It's" must mean "it has", since "It is been..." makes equally little sense.]
+
See also <<a_to_z.contractions, contractions>>.

== J

== K

== L

“-l-” or “-ll-”?

Latin abbreviations

“latter”

=== “like” or “as”?
See <<a_to_z.as_or_like, "as" or "like"?>>

lists

== M

== N

[[a_to_z.nouns_as_descriptors]]
=== nouns as descriptors

=== “npm”

=== numbers

== O

“overlay”

Oxford comma

See “lists”.

== P

=== parentheses

=== passive voice

=== phrasal verbs

[[a_to_z.possessive]]
=== possessive
English has two main ways of forming a possessive: the apostrophe and the preposition "of".

In general, use the apostrophe for people and animals. For example:

_The team leader's keyboard_

_A manager's salary_

_The employees' well-being_

_The horse's mouth_

Use the preposition "of" for things and ideas. For example:

_the name of the method_

_the beginning of the process_

_the keyboard of the computer_

_the door of the office_

A third possibility is to use one noun as a descriptor of another:

_the method name_

_the computer keyboard_

_the office door_

See also <<a_to_z.nouns_as_descriptors, nouns as descriptors>>.

“practice”

product names

punctuation::
See the specific entries for each punctuation mark; for example, “commas”, “quotation marks”, etc.

== Q

quotation marks

== R

relative clauses

“repository”

“respectively”

== S

“s” or “z”

[[a_to_z.semi-colon]]
semi-colon (“;”)::

“separator”

“server side”

single quotes (‘)::
See “quotation marks”.

slang::
We need to avoid slang for two good reasons.
One reason is that it detracts from the professional style that we are trying to convey with our documentation.
The other reason is that non-native speakers may not be familiar with slang terms.
That would impact the accessibility of our documentation.

slash (“/”)::
The slash character
+
The slash character

“software as a service”::
The abbreviation is “SaaS”. When it is written out in full, it contains no hyphens: _software as a service_.

split infinitives::
The infinitive of a verb is the form that includes the particle "to".
Examples of infinitives are _to have_, _to hold_, and _to program_.
+
Traditionally, it was considered bad style to "split" the infinitive by placing an adverb between the particle and the verb. Examples are:
+
_It is necessary to *fully* understand the process before starting._
+
_We had to *completely* rebuild the library._
+
Although split infinitives are generally accepted these days, it is worth considering whether you could easily write your sentence so as to avoid it.
+
For example, we could rewrite these examples as:
+
_It is necessary to understand the process *fully* before starting._
+
_We had to rebuild the library *completely*._
+
However, there may be some cases where strictly imposing the ideal of avoiding split infinitives could result in an awkward sentence or even introduce ambiguity.
Clearly, we need to prioritise simplicity, clarity and accuracy at all times, even if it means we have to compromise on style.

== T

“that”::
If the word “that” is optional, include it for clarity.
+
For example:
+
Instead of: “... to understand your software works correctly”, \
Use: “... to understand that your software works correctly”.

“that” or “which”?::
See “‘which’ or ‘that’”.

“their” or “they’re”?

“time frame”

time clauses in the future

times

== U

“unique”

== V

== W

=== "was" or "were"?

“which” or “that”?

“who’s” or “whose”?

X

Y

Z

“z” or “s”?::
See “‘s’ or ‘z’”.
