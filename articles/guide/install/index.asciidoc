---
title: Installing
layout: tabbed-page
tab-title: Overview
order: 10
---

= Installing
:toclevels: 2

[.lead]
So you want to develop applications using Vaadin?
Fantastic!
Here is how to get started.

First, you need to install the development tools.

Follow the instructions to install the required development tools.
Use the instructions that are appropriate for your operating system.

[.cards.quiet.large.hide-title]
== Instructions

[.card]
=== Windows
image::_images/windows.svg[32, 32, opts=inline, role=icon]
<<windows#,Install the development tools in Windows>>

[.card]
=== macOS
image::_images/macos.svg[32, 32, opts=inline, role=icon]
<<macos#,Install the development tools in macOS>>

[.card]
=== Linux
image::_images/linux.svg[32, 32, opts=inline, role=icon]
<<linux#,Install the development tools in Linux>>

=== Next Step
When you have the tools installed, you can start a new Vaadin project.

xref:../start#[Start a Project, role="button"]

== Additional Tools

As well as the required tools, there are some additional development tools that are either optional or installed automatically for you.

=== Local Development Server

Vaadin applications are run by deploying them to a Java servlet container (a server application).
All Vaadin starter packs come with an embedded servlet container that you can use during development.
You can also use an external servlet container, such as Tomcat, WildFly, or WebLogic.
IDEs support integration with such external containers.
Debugging can be easier and more compatible if you use the same container for production.

=== Dependency Management

Managing Vaadin and other Java libraries manually can become tedious.
For that reason, we recommend using a build system that manages dependencies automatically.
Vaadin is distributed in the Maven central repository.
It can be used with any other build or dependency management system that can access Maven repositories, such as Ivy or Gradle.

The npm package manager is used to manage Vaadin frontend dependencies.

=== Node.js

Vaadin uses the Node.js runtime in development mode to run the webpack development server.
It also uses the Node.js package manager (`npm`) and package runner (`npx`) to fetch, install, and run frontend packages.

Node.js can be installed in three different ways:

- Automatically into the user's home directory (`~/.vaadin/node`).
- Globally with a downloaded installer or package manager (such as Homebrew).
  Node.js can be downloaded from https://nodejs.org/en/download/[https://nodejs.org/en/download/].
  Installing Node.js installs the command-line tools `npm` and `npx` automatically, as well.
- Project-local installation (`_project_dir_/node`) using the frontend-maven-plugin[https://github.com/eirslett/frontend-maven-plugin].

If Node.js is found globally, Vaadin validates that it is a supported version.
If the version is too old, Vaadin installs a compatible version into `~/.vaadin`.
We recommend using the latest LTS version.
A project-local installation will always take precedence over a global or `~/.vaadin` installation.

==== Proxy Settings for Downloading the Frontend Toolchain

If you are behind a proxy server, you should configure your proxy settings so that Vaadin can use them to download the frontend toolchain.
Vaadin reads proxy settings from four places.
You can set your proxy data in any of these places:

. system properties
. the `{project directory}/.npmrc` file
. the `{user home directory}/.npmrc` file
. environment variables

Vaadin reads the settings from the above list in the order given.
For example, if you set your proxy in system properties, other sources will be ignored.
The keys that you should use to define your proxy settings are as follows:

[cols="2,2,3", options=header,frame=none,grid=rows]
|===
|In system properties and environment variables
|In `.npmrc` files
|Description

|HTTP_PROXY
|proxy
|A proxy to use for outgoing `http` requests

|HTTPS_PROXY
|https-proxy
|A proxy to use for outgoing `https` requests

|NOPROXY
|noproxy
|A comma-separated string of domain extensions for which a proxy should not be used
|===

The `.npmrc` file structure is `ini` (like Java properties files).
It includes key-value pairs separated by `=`.
Here is an example of the content of such a file with proxy settings:
```
proxy=http://myusername:s3cr3tpassw0rd@proxyserver1:8085"
https-proxy=http://myusername:s3cr3tpassw0rd@proxyserver1:8086"
noproxy=192.168.1.1,vaadin.com,mycompany.com
```

To learn more about `.npmrc` files, see the https://docs.npmjs.com/configuring-npm/npmrc[official npmrc document].

==== Building an Application using Travis CI

If you are using https://travis-ci.org/[Travis] as a continuous integration server, there are two different options to install an appropriate version of Node.js:

. Specify the version via the Travis configuration in `.travis.yml`.
. Install Node.js automatically using Vaadin.

Please refer to https://docs.travis-ci.com/user/languages/javascript-with-nodejs/#specifying-nodejs-versions[Specifying Node.js versions] in Travis docs for guidance on specifying the Node.js version using the `.travis.yml` file.

You can force the installation of Node.js to the `~/.vaadin` folder using the `require.home.node` property.
This property sets the value of the Maven `requireHomeNodeExec` parameter value, so you can configure the Maven goal using `<requireHomeNodeExec>true</requireHomeNodeExec>`.
To force the installation of Node.js into the home directory in development mode, you should use the `vaadin.require.home.node` system property or the `require.home.node` web init parameter.

=== pnpm

`pnpm` reduces the download time across multiple projects by caching the downloaded packages.
It is the recommended and default package manager for Vaadin projects.

You do not need to install `pnpm` separately.
Vaadin uses `npx`, the Node package runner, to locate (and, if necessary, download) a compatible verion of `pnpm`.
If you have installed `pnpm` globally (via `npm install -g pnpm`), the installed version is used by default, unless it is determined to be too old.

To install a custom frontend package into your project with `pnpm`, install Node.js globally and run `pnpm` using `npx`.
For example, to add the `mobx` package as a dependency in `package.json`, as well as to install it into `node_modules`, run the following command in the project directory:

```
npx pnpm add mobx
```

If you have installed `pnpm` globally, you can alternatively call it directly:

```
pnpm add mobx
```

Vaadin requires `pnpm` version 5 or newer.
If you have already installed an older version of `pnpm` globally, the above command runs the older version.
In this case, either upgrade `pnpm` or pass a version specifier to `npx`, for example `pnpm@5.15.2`, instead of `pnpm`.
See the https://pnpm.js.org/[pnpm website] for more information on the available commands and flags.

[NOTE]
Vaadin expects transitive platform dependencies to be available directly under `node_modules`.
In Vaadin versions earlier than 19 that use `pnpm`, the `--shamefully-hoist` flag must be explicitly given to `pnpm` during package installation: `pnpm i --shamefully-hoist mobx`.
