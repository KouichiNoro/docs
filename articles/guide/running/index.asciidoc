---
title: Running an Application
layout: tabbed-page
tab-title: Overview
order: 27
---

= Running an Application

[.lead]
Once you have imported an application in your IDE, you are ready to run it.
Applications created with <<{articles}/guide/start#, Vaadin Start>> are Spring Boot applications.
You can run these like ordinary Java applications.
Applications that are not based on Spring Boot can be run with Maven.

With a Spring Boot application such as those created with *Vaadin Start*, you simply need to run the [classname]#Application# class in the project.
This launches an embedded server to run the application.

For information on how to do this in your IDE, see <<eclipse#, Eclipse>>, <<intellij#, IntelliJ>>, or <<netbeans#, NetBeans>>.

== Running With Maven

During development, you can run a Vaadin application in an embedded web server by executing one of the Maven goals:

[cols=3*,options=header]
|===
| Technology Stack | Embedded Server | Goal to Run
| Spring Boot | â€“ | `spring-boot:run`
| CDI / Java EE | Apache TomEE | `tomee:run`
| Plain Java | Jetty | `jetty:run`
|===

== Redeploying During Development

When you save a source file, the IDE automatically compiles it.
The web server tracks the compiled files and automatically redeploys the application when it notices a change.
You can then refresh the page to use the updated version.

You can also enable _live reload_ to have the page refreshed automatically, as described in <<{articles}/guide/live-reload#, Live Reload>>.

== Debugging

Many IDEs also support debugging Java applications.
Debugging is similar to running an application normally, except that you do it in debug mode in the IDE.

.Debugging Spring Boot applications
[NOTE]
You can debug Spring Boot applications by running them as Java applications. You cannot debug with Maven using `spring-boot:run`, as the Maven goal starts the application in a separate process.
